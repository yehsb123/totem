import { ScaleSequential } from "d3-scale";
import { ColorModel } from "./TreeMapProps";
import { BaseTreeMapInPutData, NodeColors } from "./types";
import { HierarchyRectangularNode } from "d3-hierarchy";
export declare const getTopSubParentId: <TreeMapInputData extends BaseTreeMapInPutData>(node: HierarchyRectangularNode<TreeMapInputData>) => number;
export declare const getDepth: <TreeMapInputData>(obj: TreeMapInputData, childrenPropInData: string) => number;
export declare const getHighContrastColor: (r: number, g: number, b: number) => "dark" | "light";
export declare const getHighContrastColorFromString: (backgroundColor: string | undefined) => "dark" | "light";
export declare const getValueFormatFn: (valueFn: (value: number) => string, valueFormat: string) => ((value: number) => string);
export declare const getColorDomainFn: <TreeMapInputData>(topNode: HierarchyRectangularNode<TreeMapInputData>, data: TreeMapInputData, colorModel: ColorModel, childrenPropInData: string, valuePropInData: string, customD3ColorScale: ScaleSequential<string>) => ScaleSequential<string>;
export declare const getColorsFromNode: <TreeMapInputData extends BaseTreeMapInPutData>({ node, originalTopNode, colorModel, childrenPropInData, valuePropInData, customD3ColorScale, darkNodeTextColor, darkNodeBorderColor, lightNodeTextColor, lightNodeBorderColor, }: {
    node: HierarchyRectangularNode<TreeMapInputData>;
    originalTopNode: HierarchyRectangularNode<TreeMapInputData>;
    colorModel: ColorModel;
    childrenPropInData: string;
    valuePropInData: string;
    customD3ColorScale: ScaleSequential<string>;
    darkNodeTextColor: string;
    darkNodeBorderColor: string;
    lightNodeTextColor: string;
    lightNodeBorderColor: string;
}) => NodeColors;
