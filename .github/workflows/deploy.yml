# 워크플로우의 이름
name: Deploy to GitHub Pages

# 언제 이 워크플로우를 실행할지 정의
on:
  # main 브랜치에 push될 때 실행
  push:
    branches:
      - main
  # Actions 탭에서 수동으로 실행할 수도 있게 함
  workflow_dispatch:

# 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 실제 실행될 작업들
jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 저장소 코드 가져오기
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "totemFE/FE/package-lock.json"

      # 3. 의존성 설치 (프론트엔드 폴더로 이동 후 실행)
      - name: Install dependencies
        run: cd totemFE/FE && npm install

      # 4. 프로젝트 빌드 (Next.js 프로젝트)
      - name: Build
        run: cd totemFE/FE && npm run build

      # 5. index.html을 루트로 복사
      - name: Copy index.html to root
        run: |
          cp totemFE/FE/public/index.html totemFE/FE/out/
          cp totemFE/FE/public/index.html totemFE/FE/out/index.html

      # 6. 빌드 결과물을 업로드할 준비
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 7. 빌드 결과물(out 폴더)을 아티팩트로 업로드
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "totemFE/FE/out" # Next.js 빌드 결과물 폴더

  # 배포 작업
  deploy:
    # build 작업이 성공해야 실행됨
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # 7. 아티팩트를 GitHub Pages에 배포
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
